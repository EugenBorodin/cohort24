import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {

/*
  - термины и определения (английский?)
  IntelliJ Idea - программа, в которой в мы работаем
  IDE - integrated development environment - интегрированная среда разработки
  синтаксис - служебные слова конкретного языка и способ создания/вызова переменных/методов/etc.
  Текстовый редактор с подсветкой синтаксиса + запуск и отладка (debug)

  Переменные (variables) - именованные ячейки памяти
  Значение переменной:
    В переменных обычно хранится ЗНАЧЕНИЕ примитивного типа ИЛИ ССЫЛКА на объект
  Примитивные типы (не все):
  - int, long
  - double
  - char
  - boolean
  Классы-обёртки над примитивными типами:
  - Integer, Long
  - Double
  - Character
  - Boolean
  Если вы не уверены, что использовать - используйте примитивный тип

  Объекты - экземпляры конкретного класса.
  Классы - как типы, но более сложные (сложнее устроены)
  Примеры классов:
  - String
  - List
  - Set
  - Map

  Тип -> переменная
  Класс -> объект, а переменная - ссылка на этот объект

  переменная = значение
   - мы перезаписываем значение переменной (перезаписываем ссылку)
  int x = 3;
  x = 5; // перезаписали значение x
  String line = "мама";
  line = "папа"; // перезаписали значение line, то есть заменили ссылку на строку
  // теперь это другая ссылка на другую строку

  При создании (только при создании) переменной мы указываем её тип
   (примитивный тип или класс ссылки)
  тип переменная = значение;
  int x = 3;
  String line = "мама";

  При повторном использовании той же переменной тип НЕ УКАЗЫВАЕМ:
  String line = "мама";
  line = "папа";

  Во время работы программа может столкнуться с ошибкой
  В таком случае в Java программа выкидывает соответствующее исключение (throws exception)
  Исключения бывают непроверяемые (unchecked) (в основном) и проверяемые (checked)
  За проверяемыми исключениями Java заставляет следить
  И либо ловить их (catch), либо предупредить, что оно может "выпасть" (что метод его выбрасывает)
  (a method throws an exception)
  Пример проверяемого исключения - IOException
*/

  // прочитать высоту треугольника и напечатать треугольник звёздочками
  // для высоты 4:
  // *
  // **
  // ***
  // ****
  // обычно в название метода пишем глагол-действие
  // scope - область видимости переменной - пространство, в котором существует переменная
  // задаётся ближайшими "снаружи" фигурными скобками
  public static void solveTask1Triangle() throws IOException {
    System.out.println("Начался метод solveTask1Triangle()");
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

    System.out.print("Введите высоту треугольника: ");
    // метод parseInt(строка) берёт строку и пытается распознать (распарсить) (parse) в ней число
    // если строку не получилось превратить в число, выкинет NumberFormatException
    int height = Integer.parseInt(br.readLine());
    printTriangle(height);
    System.out.println("Закончился метод solveTask1Triangle()");
  }

  // напечатать треугольник заданной высоты
  // аргументы метода тоже существуют только внутри метода, при каждом вызове НОВЫЕ
  public static void printTriangle(int height) {
    System.out.println("Начался метод printTriangle(int height=" + height + ")");
    // длины строчек будут меняться от 1 до height включая
    // длина - length
    for (int length = 1; length <= height; ++length) { // каждый шаг цикла - новая строчка
      // для повторов (повтори n раз)
      // i - как "индексы повторений"
      // повтори звёздочку length раз
      for (int i = 0; i < length; ++i) { // i нам не нужна - она нужна только для счётчика повторов
        System.out.print("*");
      }
      System.out.println(); // Заканчиваем вывод строки - напечатали length звёздочек
    }
    // для индексов: от 0 включая до size() не включая
    // for (int i = 0; i < список.size(); ++i)
    System.out.println("Закончился метод printTriangle(int height)");
  }

//  - boolean как переменные (применение)
//  - методы !!
//  - Map - повторить
//  - массивы - синтаксис
  // main - главный, основной
  // метод main - главный метод - с него начинается выполнение программы
  public static void main(String[] args) throws IOException {
    System.out.println("Начался метод main(String[] args)");
    solveTask1Triangle();

    System.out.println("\n===\n");

    printTriangle(6);
    System.out.println("Закончился метод main(String[] args)");
  }
}
