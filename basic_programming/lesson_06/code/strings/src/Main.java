import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
    public static void main(String[] args) throws IOException {
        // Систематизируем:
        // - есть примитивные типы - на них не бывает ссылок
        //   примеры: int, byte, char, short, boolean, long, double, float

        // - есть иммутабельные (неизменяемые) классы - на них бывают ссылки, но любая попытка изменения
        //   создаёт новый объект с новой ссылкой
        //   примеры: String, Integer, Byte, Character, Short, Boolean, Long, Double, Float, BigInteger и BigDecimal
        //   (обёртки над примитивными типами) и важные системные классы

        // - все остальные классы -- ссылочные, то есть любой объект будет ссылкой, и изменений по любой
        //   ссылке изменит сам объект (по всем остальным ссылкам тоже сразу будет изменённый объект)
        //   (как ссылка на сайт или ярлык к файлу)
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedReader br2 = br; // у br и br2 всё общее - это ссылочный класс, это две ссылки
        // на один-единственный BufferedReader

        String line = br.readLine(); // прочитали с клавиатуры новую строку
        String anotherLine = line; // не копия строки, а копия ссылки на одну и ту же строку
        String anotherNewLine = new String(line); // новый объект - копия старого, а не ссылка
        // String ведут себя по-особенному, а для всех остальных классов всё будет именно так
        // На самом деле String - неизменяемый (иммутабельный) класс
        line = "Какое-то новое значение"; // я изменил НЕ старую строку, а СОЗДАЛ новую и
        // записал в line ссылку уже на НОВУЮ строку
        // anotherLine будет старой ссылкой -- соответственно, на старую строку

        int num = 5;
        int anotherNum = num; // примитивный тип -- anotherNum уже отдельное число, копия num

        // ЕСЛИ БЫ line БЫЛА НЕ String
        // если здесь изменить line, то anotherLine изменится вместе с ней,
        // а anotherNewLine останется как была

        // для иммутабельных классов это работает НЕ ТАК (!!!), но для всех остальных классов -- так
        // после изменения String line изменится именно ссылка (адрес), а в anotherLine останется старая ссылка

        String empty = ""; // Ссылка ведёт на пустую строку
        String nothing = null; // Ссылка никуда не ведёт
        Integer notZero = null; // На Integer можно делать ссылки и использовать null, а на int - нельзя
        // null -- служебное слово, ссылка "ни на что", для всех классов одинаковое
        // нулевой адрес - адреса в памяти нет
        anotherLine = null; // в 28-й строчке мы перезаписали line, она стала вести на другое место
        // и на старую строку вела только ссылка anotherLine
        // здесь мы стёрли anotherLine -- на "старую" строку из 23-й строчки больше не ведут никакие ссылки
    }
}
