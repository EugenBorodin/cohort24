import java.util.ArrayList;
import java.util.List;

public class Main {

  public static void main(String[] args) {
    // Временная сложность операций:
    // - доступ к элементу по индексу
    // - поиск элемента / ключа
    // - вставка элемента
    // - удаление элемента

    // Коллекции
    // 1. raw array - массив[]
    // * все элементы расположены в памяти подряд
    // * размер не меняется
    // - доступ к элементу по индексу - O(1) - сдвиг в памяти
    // - поиск элемента / ключа - O(n) - линейный поиск
    // - вставка элемента - n/a (not applicable - не применимо)
    // - удаление элемента - n/a

    // 2. ArrayList - на основе массива
    // * может меняться размер
    // - доступ к элементу по индексу - O(1) - сдвиг в памяти
    // - поиск элемента / ключа - O(n) - линейный поиск
    // - вставка элемента - O(n) - сдвиг следующих элементов
    // - вставка элемента в конец - O(1) / O(n), если массив надо пересоздать
    // - удаление элемента - O(n) - сдвиг следующих элементов
    // - удаление последнего элемента - O(1)

    // 3. LinkedList
    // - доступ к элементу по индексу - O(n) - поиск с самого начала
    // - поиск элемента / ключа - O(n) - линейный поиск
    // - вставка элемента - O(1) - "переклеиваем ниточки"
    // - удаление элемента - O(1) - сдвиг следующих элементов

    // 4. HashSet / HashMap
    // * для каждого элемента вычисляется хэш и в коллекции поиск происходит по хэшу
    // * коллизии - совпадение хэша для разных объектов
    // - доступ к элементу по индексу - n/a
    // - поиск элемента / ключа - O(1) или O(n) в случае коллизий
    // - вставка элемента - O(1) или O(n) в случае коллизий
    // - удаление элемента - O(1) или O(n) в случае коллизий

    // 5. TreeSet / TreeMap
    // * все элементы сразу отсортированы (и вставка сразу правильная)
    // - доступ к элементу по индексу - n/a
    // - поиск элемента / ключа - O(log N) - бинарный поиск
    // - вставка элемента - O(log N) - бинарный поиск места вставки
    // - удаление элемента - O(log N) - бинарный поиск
  }
}
